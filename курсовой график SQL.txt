--задание 1
with first_payments as 
    (select a.user_id
     --  , min(transaction_datetime::date) as first_payment_date
         , min(date_trunc('day', transaction_datetime)) as first_payment_date
    from skyeng_db.payments a
       where a.status_name = 'success'
    group by user_id
    order by user_id
    ),
all_dates as 
    (select distinct date_trunc('day', class_start_datetime) as dt
    from skyeng_db.classes b
    where b.class_start_datetime between '2016-01-01' and '2016-12-31'
    ),
payments_by_dates as 
    (select a.user_id
       , date_trunc('day',transaction_datetime) as payment_date
       , sum(classes) as transaction_balance_change 
    from skyeng_db.payments a
    where status_name = 'success'
    group by a.user_id
       , payment_date
    order by a.user_id
       , payment_date
    ),
    
    
--задание 2 
all_dates_by_user as
    (select c.user_id
        , d.dt
    from first_payments c
        join all_dates d 
        on c.first_payment_date <= d.dt
        order by c.user_id
    ),
    
   
--задание 3 
classes_by_dates as
    (select  b.user_id
           , date_trunc('day', class_start_datetime) as class_date  
           , count (id_class)*-1 as classes
    from skyeng_db.classes b 
    where class_status in ('success', 'failed_by_student')
          and class_type !='trial'
          group by b.user_id 
                  , class_date 
    ),
    
payments_by_dates_cumsum as     
    (select f.user_id
       , f.dt 
       , coalesce (g.transaction_balance_change, 0) as  transaction_balance_change 
       , sum (coalesce(g.transaction_balance_change, 0)) over (partition by f.user_id order by f.dt rows between unbounded preceding and current row) 
       as transaction_balance_change_cs
      from all_dates_by_user f 
      left join payments_by_dates g 
      on f.user_id = g.user_id 
             and f.dt = g.payment_date
    ),    
classes_by_dates_cumsum as   
   (select  f.user_id
      , f.dt
      , h.classes
      , coalesce(h.classes, 0) as cnt_classes
      , sum (h.classes) over (partition by f.user_id order by f.dt rows between unbounded preceding and current row) as classes_cs
    from all_dates_by_user f
    left join classes_by_dates h 
    on f.user_id = h.user_id 
        and h.class_date = f.dt
    --order by f.dt    
    ),
    
balances as
    (select pcs.user_id
         , pcs.dt 
         , pcs.transaction_balance_change
         , pcs.transaction_balance_change_cs
         , ccs.cnt_classes
         , ccs.classes_cs
         , (coalesce(pcs.transaction_balance_change_cs, 0) + coalesce(ccs.classes_cs, 0)) as balance 
    from payments_by_dates_cumsum pcs 
    join classes_by_dates_cumsum ccs 
    on pcs.user_id = ccs.user_id
       and pcs.dt = ccs.dt
    )
    
select dt 
    , sum (coalesce(transaction_balance_change, 0)) sum_transaction_balance_change
    , sum (coalesce(transaction_balance_change_cs, 0)) sum_transaction_balance_change_cs
    , sum (coalesce(cnt_classes, 0)) sum_cnt_classes
    , sum (coalesce(classes_cs, 0)) sum_classes_cs
    , sum (coalesce(balance, 0)) sum_balance
  from balances
  group by dt 
  order by dt 
  limit 1000